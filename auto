package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import java.util.Locale;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;

@TeleOp(name = "Sensor: REVColorDistance", group = "Sensor")

public class MyFIRSTJavaOpMode extends LinearOpMode {
    private DcMotor motorLeft;
    private DcMotor motorRight;
    private DcMotor motorArm;
    private DcMotor motorTop;
    private DigitalChannel digitalTouch;
    private Blinker expansion_Hub_2;
    private ColorSensor sensorColorRange;
    private Servo servo1;
    private Servo servo2;
    private ColorSensor sensorColor;
    private DistanceSensor sensorDistance;
    
    
    @Override
    public void runOpMode() {
        motorRight = hardwareMap.get(DcMotor.class, "motorRight");
        motorLeft = hardwareMap.get(DcMotor.class, "motorLeft");
        motorArm = hardwareMap.get(DcMotor.class, "motorArm");
        motorTop = hardwareMap.get(DcMotor.class, "motorTop");
        digitalTouch = hardwareMap.get(DigitalChannel.class, "digitalTouch");
        expansion_Hub_2 = hardwareMap.get(Blinker.class, "Expansion Hub 2");
        sensorColor = hardwareMap.get(ColorSensor.class, "sensorColorRange");
        sensorDistance = hardwareMap.get(DistanceSensor.class, "sensorColorRange");
        servo1 = hardwareMap.get(Servo.class, "servo1");
        servo2 = hardwareMap.get(Servo.class, "servo2");
        // set digital channel to input mode.
        digitalTouch.setMode(DigitalChannel.Mode.INPUT);
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        float hsvValues[] = {0F, 0F, 0F};
        final float values[] = hsvValues;
        final double SCALE_FACTOR = 255;
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        double tgtPower = 0;
        double tgtPower2 = 0;
        double tgtPowerArmBase = 0;
        double tgtPowerArmTop = 0;
        double servoPos1 = 0;
        int x = 0;
        int times = 0;
        
        // Autonomous code
        // Lower robot down
        motorArm.setPower(.5);
        motorTop.setPower(-.5);
        try {
            Thread.sleep(3000);//change
        }
        catch (InterruptedException e) {}
        motorArm.setPower(0);
        motorTop.setPower(0);
        
        // Turn around
        motorRight.setPower(.5);
        motorLeft.setPower(-.5);
        try {
            Thread.sleep(3000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        //Drive until block
        motorRight.setPower(.5);
        motorLeft.setPower(.5);
        try {
            Thread.sleep(3000);//change
        }
        catch (InterruptedException e) {}
        
        //Look at blocks
        for (int i = 0; i < 3; i++){
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);
            if (hsvValues[0] < 60) {
                motorRight.setPower(.5);
                motorRight.setPower(.5);
                try {
                    Thread.sleep(1000);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(-.5);
                motorLeft.setPower(-.5);
                try {
                    Thread.sleep(1000);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(0);
                motorLeft.setPower(0);
                
            }
            else {
                motorRight.setPower(-.5);
                motorLeft.setPower(-.5);
                try {
                    Thread.sleep(3000);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(.5);//change
                motorLeft.setPower(.25);//change
                try {
                    Thread.sleep(3000);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(0);
                motorLeft.setPower(0);
                times++;
            }
        }
        
        // Go to box in the corner
        motorRight.setPower(-.5);
        motorLeft.setPower(-.5);
        try {
            Thread.sleep(1000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        motorRight.setPower(.5);
        motorLeft.setPower(-.5);
        try {
            Thread.sleep(1000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        motorRight.setPower(-.5);
        motorLeft.setPower(.5);
        try {
            Thread.sleep(1000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        motorRight.setPower(-.5);
        motorLeft.setPower(.5);
        try {
            Thread.sleep(1000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        motorRight.setPower(.5);
        motorLeft.setPower(.5);
        try {
            Thread.sleep(1000);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        // Drop the "flag"
        servo2.setPosition(1);
        
        // Wait for the rest of the time
        try {
            Thread.sleep(30000-(6000*x));//change
        }
        catch (InterruptedException e) {}
        
        
        relativeLayout.post(new Runnable() {
            public void run() {
                relativeLayout.setBackgroundColor(Color.WHITE);
            }
        });
    }
}
