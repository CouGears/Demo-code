package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import java.util.Locale;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;

@TeleOp(name = "Sensor: REVColorDistance", group = "Sensor")

public class MyFIRSTJavaOpMode extends LinearOpMode {
    private DcMotor motorLeft;
    private DcMotor motorRight;
    private DcMotor motorArm;
    private DcMotor motorTop;
    private DigitalChannel digitalTouch;
    private Blinker expansion_Hub_2;
    private ColorSensor sensorColorRange;
    private Servo servo1;
    private ColorSensor sensorColor;
    private DistanceSensor sensorDistance;
    
    
    @Override
    public void runOpMode() {
        motorRight = hardwareMap.get(DcMotor.class, "motorRight");
        motorLeft = hardwareMap.get(DcMotor.class, "motorLeft");
        motorArm = hardwareMap.get(DcMotor.class, "motorArm");
        motorTop = hardwareMap.get(DcMotor.class, "motorTop");
        digitalTouch = hardwareMap.get(DigitalChannel.class, "digitalTouch");
        expansion_Hub_2 = hardwareMap.get(Blinker.class, "Expansion Hub 2");
        sensorColor = hardwareMap.get(ColorSensor.class, "sensorColorRange");
        sensorDistance = hardwareMap.get(DistanceSensor.class, "sensorColorRange");
        servo1 = hardwareMap.get(Servo.class, "servo1");
        // set digital channel to input mode.
        digitalTouch.setMode(DigitalChannel.Mode.INPUT);
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        float hsvValues[] = {0F, 0F, 0F};
        final float values[] = hsvValues;
        final double SCALE_FACTOR = 255;
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        double tgtPower = 0;
        double tgtPower2 = 0;
        double tgtPowerArmBase = 0;
        double tgtPowerArmTop = 0;
        double servoPos1 = 0;
        int x = 0;
        int times = 0;
        
        // Autonomous code
        
        // Lower robot down
        motorArm.setPower(.5);
        motorTop.setPower(-.5);
        try {
            Thread.sleep(500);//change
        }
        catch (InterruptedException e) {}
        motorArm.setPower(0);
        motorTop.setPower(0);
        
        // Turn around
        motorRight.setPower(.5);
        motorLeft.setPower(-.5);
        try {
            Thread.sleep(500);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        //Drive until block
        motorRight.setPower(.5);
        motorLeft.setPower(.5);
        try {
            Thread.sleep(500);//change
        }
        catch (InterruptedException e) {}
        
        //Look at blocks
        for (int i = 0; i < 3; i++){
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);
            if (hsvValues[0] < 60 || i == 2) {
                motorRight.setPower(.5);
                motorRight.setPower(.5);
                try {
                Thread.sleep(500);//change
                }
                catch (InterruptedException e) {}
                i = 3;
            }
            else {
                motorRight.setPower(-.5);
                motorLeft.setPower(-.5);
                try {
                Thread.sleep(500);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(.5);//change
                motorLeft.setPower(.25);//change
                try {
                Thread.sleep(500);//change
                }
                catch (InterruptedException e) {}
                motorRight.setPower(0);
                motorLeft.setPower(0);
                times++;
            }
        }
        
        // Wait for the rest of the time
        try {
            Thread.sleep(5000-(1000*x));//change
        }
        catch (InterruptedException e) {}
        
        // Controller operated
        while (opModeIsActive()) {
            if(gamepad1.a){
                x = 0;
            }
            if(gamepad1.b){
                x = 1;
            }
            if(gamepad1.x){
                x = 2;
            }
            if(gamepad1.y){
                x = 3;
            }
            
            if(x == 0){ 
                tgtPower = ((-this.gamepad1.left_stick_y)/2)+((-this.gamepad1.right_stick_x)/2);
                tgtPower2 = -((-this.gamepad1.left_stick_y)/2)+((-this.gamepad1.right_stick_x)/2);
            }
            if(x == 1){ 
                tgtPower = ((-this.gamepad1.left_stick_y)/5)+((-this.gamepad1.right_stick_x)/5);
                tgtPower2 = -((-this.gamepad1.left_stick_y)/5)+((-this.gamepad1.right_stick_x)/5);
            }
            if(x == 2){ 
                tgtPower = ((-this.gamepad1.left_stick_y)/10)+((-this.gamepad1.right_stick_x)/10);
                tgtPower2 = -((-this.gamepad1.left_stick_y)/10)+((-this.gamepad1.right_stick_x)/10);
            }
            if(x == 3){ 
                tgtPower = ((-this.gamepad1.left_stick_y)/15)+((-this.gamepad1.right_stick_x)/15);
                tgtPower2 = -((-this.gamepad1.left_stick_y)/15)+((-this.gamepad1.right_stick_x)/15);
            }
            
            
            if (tgtPower > .5) {
                tgtPower = .5;
            }
            else if (tgtPower < -.5) {
                tgtPower = -.5;
            }
            if (tgtPower2 > .5) {
                tgtPower2 = .5;
            }
            else if (tgtPower2 < -.5) {
                tgtPower2 = -.5;
            }
            motorRight.setPower(tgtPower);
            motorLeft.setPower(tgtPower2);
            
            //Arm
            
            if(gamepad2.a){
                servoPos1 = servoPos1 + 0.05;
            }
            else if(gamepad2.b){
                servoPos1 = -0.05;
            }
            else {
                
            }
            servo1.setPosition(servoPos1);
            
            tgtPowerArmBase = ((-this.gamepad2.left_stick_y)/4);
            motorArm.setPower(tgtPowerArmBase);
            tgtPowerArmTop = ((this.gamepad2.right_stick_y)/4);
            motorTop.setPower(tgtPowerArmTop);
            
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);
            
            telemetry.addData("Servo Position 1", servo1.getPosition());
            telemetry.addData("Target R Power", tgtPower2);
            telemetry.addData("Target L Power", tgtPower);
            telemetry.addData("Motor R Power", motorRight.getPower());
            telemetry.addData("Motor L Power", motorLeft.getPower());
            telemetry.addData("Distance (cm)", String.format(Locale.US, "%.02f", sensorDistance.getDistance(DistanceUnit.CM)));
            telemetry.addData("Hue", hsvValues[0]);
            
            // is button pressed?
            if (digitalTouch.getState() == false) {
                // button is pressed.
                telemetry.addData("Button", "PRESSED");
            } 
            else {
                // button is not pressed.
                telemetry.addData("Button", "NOT PRESSED");
            }
            telemetry.addData("Status", "Running");
            
            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

            telemetry.update();
        }
        relativeLayout.post(new Runnable() {
            public void run() {
                relativeLayout.setBackgroundColor(Color.WHITE);
            }
        });
    }
}
