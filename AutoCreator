package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import java.util.Timer;
import java.lang.annotation.Target;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import java.util.Locale;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;

@Autonomous//(name = "Sensor: REVColorDistance", group = "Sensor")

public class AutoCreator extends LinearOpMode {
    private DcMotor motorLeft;
    private DcMotor motorRight;
    private DcMotor motorSide;
    //private Blinker expansion_Hub_2;
    private ColorSensor sensorColorRange;
    private Servo servoMarker;
    private Servo servoHolder;
    private Servo servo3;
    private ColorSensor sensorColor;
    private DistanceSensor sensorDistance;
    
    
    @Override
    public void runOpMode() {
        motorRight = hardwareMap.get(DcMotor.class, "motorRight");
        motorLeft = hardwareMap.get(DcMotor.class, "motorLeft");
        motorSide = hardwareMap.get(DcMotor.class, "motorSide");
        //expansion_Hub_2 = hardwareMap.get(Blinker.class, "Expansion Hub 2");
        sensorColor = hardwareMap.get(ColorSensor.class, "sensorColorRange");
        sensorDistance = hardwareMap.get(DistanceSensor.class, "sensorColorRange");
        servoMarker = hardwareMap.get(Servo.class, "servoMarker");
        servoHolder = hardwareMap.get(Servo.class, "servoHolder");
        servo3 = hardwareMap.get(Servo.class, "servo3");
        telemetry.addData("Status", "Initialized");
        telemetry.update();
       
        float hsvValues[] = {0F, 0F, 0F};
        final float values[] = hsvValues;
        final double SCALE_FACTOR = 255;
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        //final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // Run until the end of the match (driver presses STOP)
        double tgtPower = 0;
        double tgtPower2 = 0;
        double tgtPowerArmBase = 0;
        double tgtPowerArmTop = 0;
        int x = 0;
        int times = 0;
        
        //Very important
        long speedVar = 0L;

        //actual autonomous Code
        
        //Have the robot lower itself
        motorSide.setPower(-.25);
        try{
            Thread.sleep(9000);
        }
        catch (InterruptedException e) {}
        motorSide.setPower(0);
        
        //move off of the hook
        motorRight.setPower(-.25);
        motorLeft.setPower(.25);
        try {
            Thread.sleep(750);
        }
        catch (InterruptedException e) {}
        
        motorRight.setPower(.25);
        motorLeft.setPower(.25);
        try {
            Thread.sleep(1700);
        }
        catch (InterruptedException e) {}
        
        //drive off block
        motorRight.setPower(-.25);
        motorLeft.setPower(.25);
        try {
            Thread.sleep(6250);
        }
        catch (InterruptedException e) {}
        
        motorRight.setPower(.25);
        motorLeft.setPower(.25);
        try {
            Thread.sleep(750);
        }
        catch (InterruptedException e) {}
        motorRight.setPower(-.25);
        motorLeft.setPower(.25);
        try {
            Thread.sleep(200);//change
        }
        catch (InterruptedException e) {}
        
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        //sample
        int runs = 0;
        for (int i = 0; i < 2; i++){
            //stop infront of block so we know it works
            try {
                Thread.sleep(1000);
            }
            catch (InterruptedException e) {}
            
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);
            // If the object is yellow
            if (hsvValues[0] < 65) {
                //drive forward to push it off
                motorRight.setPower(-.25);
                motorLeft.setPower(.25);
                try {
                    Thread.sleep(2000);
                }
                catch (InterruptedException e) {}
                //stop
                motorRight.setPower(0);
                motorLeft.setPower(0);
                runs = i+1;
                i = 3;
                break;
            }
            
            // If the first two objects are white
            else if (i == 1){
                //back up
                motorRight.setPower(.25);
                motorLeft.setPower(-.25);
                //add
                /*
                //turn 90 degrees
                motorRight.setPower(-.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(speedVar/4L);//change
                }
                catch (InterruptedException e) {}
                
                //move forward a bit
                motorRight.setPower(.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(speedVar/8L);
                }
                catch (InterruptedException e) {}
                
                //arc to the block
                motorRight.setPower(.5);//change
                motorLeft.setPower(-.1);//change
                try {
                    Thread.sleep(speedVar/5L*11L);//change
                }
                catch (InterruptedException e) {}
                
                //push the block off
                motorRight.setPower(.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(speedVar/5L);
                }
                catch (InterruptedException e) {}
                
                //stop
                motorRight.setPower(0);
                motorLeft.setPower(0);
                runs = 3;*/
            }
            
            // If the object is white
            else {
                //back up
                motorRight.setPower(.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(1500);//change
                }
                catch (InterruptedException e) {}
                /*
                //turn 90 degrees
                motorRight.setPower(-.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(speedVar/4L);//change
                }
                catch (InterruptedException e) {}
                
                //move forward a bit
                motorRight.setPower(.25);
                motorLeft.setPower(-.25);
                try {
                    Thread.sleep(speedVar/8L);
                }
                catch (InterruptedException e) {}
                
                //arc to the block
                motorRight.setPower(.5);//change
                motorLeft.setPower(-.1);//change
                try {
                    Thread.sleep(speedVar/5L*11L);//change
                }
                catch (InterruptedException e) {}
                
                //stop
                motorRight.setPower(0);
                motorLeft.setPower(0);*/
            }
            
        }
        /*
        //park on the creator
        motorRight.setPower(.52);
        motorLeft.setPower(-.52);
        try {
            Thread.sleep(3200);//change
        }
        catch (InterruptedException e) {}
        motorRight.setPower(0);
        motorLeft.setPower(0);
        
        
        //relativeLayout.post(new Runnable() {
            //public void run() {
                //relativeLayout.setBackgroundColor(Color.WHITE);
            //}
        //});
        */
    }
}

