package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a PushBot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Remove a @Disabled the on the next line or two (if present) to add this opmode to the Driver Station OpMode list,
 * or add a @Disabled annotation to prevent this OpMode from being added to the Driver Station
 */
@TeleOp

public class MyFIRSTJavaOpMode extends LinearOpMode {
    private Gyroscope imu;
    private DcMotor motorLeft;
    private DcMotor motorRight;
    private DigitalChannel digitalTouch;
    private Blinker expansion_Hub_2;
    private DistanceSensor sensorColorRange;
    private Servo servoTest;


    @Override
    public void runOpMode() {
        imu = hardwareMap.get(Gyroscope.class, "imu");
        motorRight = hardwareMap.get(DcMotor.class, "motorRight");
        motorLeft = hardwareMap.get(DcMotor.class, "motorLeft");
        digitalTouch = hardwareMap.get(DigitalChannel.class, "digitalTouch");
        expansion_Hub_2 = hardwareMap.get(Blinker.class, "Expansion Hub 2");
        sensorColorRange = hardwareMap.get(DistanceSensor.class, "sensorColorRange");
        servoTest = hardwareMap.get(Servo.class, "servoTest");
        
        // set digital channel to input mode.
        digitalTouch.setMode(DigitalChannel.Mode.INPUT);
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        double tgtPower = 0;
        double tgtPower2 = 0;
        double servoPos = 0;
        while (opModeIsActive()) {
            tgtPower = (-this.gamepad1.left_stick_y)/2;
            motorLeft.setPower(tgtPower);
            //dock 0 on the hub
            
            tgtPower2 = (this.gamepad1.right_stick_y)/2;
            motorRight.setPower(tgtPower2);
            //dock 1 on the hub
            
            // check to see if we need to move the servo.
            if(gamepad2.y) {
                // move to 0 degrees.
                servoTest.setPosition(0);
            } 
            else if (gamepad2.x || gamepad2.b) {
                // move to 90 degrees.
                servoTest.setPosition(0.5);
            }
            else if (gamepad2.a) {
                // move to 180 degrees.
                servoTest.setPosition(1);
            }
            servoPos = ((-this.gamepad1.right_stick_y)/2) + 0.5;
            servoTest.setPosition(servoPos);
            telemetry.addData("Servo Position", servoTest.getPosition());
            telemetry.addData("Target R Power", tgtPower2);
            telemetry.addData("Target L Power", tgtPower);
            telemetry.addData("Motor R Power", motorRight.getPower());
            telemetry.addData("Motor L Power", motorLeft.getPower());
            telemetry.addData("Distance CM", sensorColorRange.getDistance(DistanceUnit.CM));
            // is button pressed?
            if (digitalTouch.getState() == false) {
                // button is pressed.
                telemetry.addData("Button", "PRESSED");
            } 
            else {
                // button is not pressed.
                telemetry.addData("Button", "NOT PRESSED");
            }
            telemetry.addData("Status", "Running");
            telemetry.update();
        }
    }
}
